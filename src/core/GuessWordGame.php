<?php
/*
 * BootHelpDemo
 *
 * (The MIT License)
 *
 * Copyright (c) 2015 Jorge Cobis <jcobis@gmail.com / http://twitter.com/cobisja>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace BootHelpDemo;

use BootHelpDemo\GameInterface;
use cobisja\BootHelp\BootHelp;


class GuessWordGame implements GameInterface {
    const HIDDEN_LETTER_CHAR = '?';
    const COVERED_CLASS = 'danger';
    const UNCOVERED_CLASS = 'success';

    private $selected_word;
    private $hidden_word;
    private $selected_word_length;

    // Words generated by @link http://www.wordgenerator.net/random-word-generator.php
    private static $words =  [
        'Pill', 'Vomitive', 'Hemo', 'Jacare', 'Radon', 'Expurge', 'Coafforest', 'Bookworm',
        'Plantigrada', 'Disconsolation', 'Coherently', 'Stram', 'Sylvine', 'Debilitate'
    ];


    public function __construct($word=null, $hidden_word=null) {
        $this->set_selected_word($word);
        $this->selected_word_length = strlen($this->selected_word);
        $this->set_hidden_word($hidden_word);
    }

    public function get_description() {
        return
        'This is a simple game where you have to guess a random word. When you start the game '
        . 'you will see a hidden word where only the first and last letter are showed. Beside the word '
        . 'you have a form where you can write down a letter and if that letter belongs to the hidden word '
        . 'all question marks will be replaced by the letter.';
    }

    public function get_real_data() {
        return $this->get_selected_word();
    }

    public function get_hidden_data() {
        return $this->get_hidden_word();
    }

    public function get_progress() {
        $base = $this->selected_word_length - 2;
        return (int)((1 - substr_count($this->hidden_word, self::HIDDEN_LETTER_CHAR) / $base) * 100);
    }

    public function display() {
        $hidden_word = BootHelp::button_group(['size'=>'large', 'justified'=>true], function(){
                $hidden_word = array_map(function($letter){
                    return BootHelp::button($letter, ['context'=> self::HIDDEN_LETTER_CHAR === $letter ? self::COVERED_CLASS : self::UNCOVERED_CLASS]);
                }, str_split($this->hidden_word));

                return $hidden_word;
            });

        return $hidden_word->to_string();
    }

    public function process_user_input($data) {
        $good = false;
        $letter = strtoupper($data);

        foreach (str_split($this->selected_word) as $i => $l) {
            if ($l === $letter) {
                $this->hidden_word[$i] = $letter;
                $good = true;
            }
        }

        return $good;
    }

    public function is_data_guessed() {
        return $this->hidden_word === $this->selected_word;
    }

        private function get_selected_word() {
        return $this->selected_word;
    }

    private function get_hidden_word() {
        return $this->hidden_word;
    }

    private function set_selected_word($word=null) {
        $this->selected_word = is_null($word) ? $this->pick_a_word() : $word;
    }

    private function set_hidden_word($hidden_word= null) {
        $this->hidden_word = is_null($hidden_word) ? $this->hide_word() : $hidden_word;
    }

    private function pick_a_word() {
        $random_index = mt_rand(0, count(self::$words)-1);
        return strtoupper(self::$words[$random_index]);
    }

    private function hide_word() {
        $hidden_sub_word = str_repeat(self::HIDDEN_LETTER_CHAR, $this->selected_word_length - 2);
        return $this->selected_word[0] . $hidden_sub_word . $this->selected_word[$this->selected_word_length - 1];
    }
}
